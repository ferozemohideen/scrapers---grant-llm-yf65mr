# Backend Continuous Integration Workflow
# Handles automated testing, linting, and security scanning with enhanced compliance
name: Backend CI

# Trigger workflow on push/PR to main/develop branches and weekly security scan
on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scan on Sunday

# Define permissions required for the workflow
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write

# Environment variables used across jobs
env:
  NODE_VERSION: '16.x'
  NODE_ENV: 'test'
  CI: true
  CODEQL_TIMEOUT: '360'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for better security scanning

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/backend/package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Verify node_modules
        run: npm ls --prod

      - name: TypeScript compilation check
        run: npm run build

      - name: Run ESLint
        run: npm run lint
        
      - name: Check code formatting
        run: npm run format:check

      - name: Run unit tests with coverage
        run: npm run test:coverage
        
      - name: Run integration tests
        run: npm run test:integration

      - name: Check coverage thresholds
        run: |
          COVERAGE_SUMMARY=$(cat coverage/coverage-summary.json)
          LINES_COVERED=$(echo $COVERAGE_SUMMARY | jq '.total.lines.pct')
          if (( $(echo "$LINES_COVERED < 80" | bc -l) )); then
            echo "Coverage below threshold: $LINES_COVERED%"
            exit 1
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: src/backend/coverage
          retention-days: 14

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended,security-and-quality
          config-file: ./.github/codeql/codeql-config.yml
          ram: 6144
          threads: 4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: src/backend
        run: npm ci

      - name: Build for analysis
        working-directory: src/backend
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
          upload: true
          output: sarif-results
          timeout-minutes: ${{ fromJson(env.CODEQL_TIMEOUT) }}

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: sarif-results
          category: "/language:javascript"

      - name: Run npm audit
        working-directory: src/backend
        run: npm audit --production --audit-level=high
        continue-on-error: true

  # Workflow status check
  status-check:
    name: Status Check
    needs: [test, security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check workflow status
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1