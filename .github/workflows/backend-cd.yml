# Backend Continuous Deployment Workflow
# Handles automated deployment to AWS ECS with blue-green strategy
name: Backend CD

# Trigger on successful completion of Backend CI workflow
on:
  workflow_run:
    workflows: ["Backend CI"]
    types: [completed]
    branches: [main]

# Define required permissions for OIDC authentication with AWS
permissions:
  id-token: write
  contents: read
  packages: write

# Environment variables used across jobs
env:
  NODE_VERSION: '16.x'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  HEALTH_CHECK_URL: ${{ secrets.HEALTH_CHECK_URL }}
  DEPLOYMENT_TIMEOUT: '600'
  NODE_ENV: 'production'
  CI: 'true'
  DOCKER_BUILDKIT: '1'
  DEPLOYMENT_STRATEGY: 'BLUE_GREEN'

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    # Only run if CI workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      # Setup deployment environment
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/backend/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login

      # Build and push Docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend
          push: true
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.sha }}

      # Deploy to ECS using blue-green strategy
      - name: Deploy to ECS
        run: |
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }})
          
          # Create new task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" \
            '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities)')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --region ${{ env.AWS_REGION }} --cli-input-json "$NEW_TASK_DEFINITION" --query 'taskDefinition.taskDefinitionArn' --output text)
          
          # Create new target group
          NEW_TG_ARN=$(aws elbv2 create-target-group \
            --name "${{ env.ECS_SERVICE }}-$(date +%s)" \
            --protocol HTTP \
            --port 80 \
            --vpc-id ${{ secrets.VPC_ID }} \
            --health-check-path /health \
            --health-check-interval-seconds 30 \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text)
          
          # Update ECS service
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment \
            --health-check-grace-period-seconds 120

      # Health check and validation
      - name: Health check
        id: health_check
        run: |
          # Wait for new tasks to be stable
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
          
          # Validate application health
          for i in {1..30}; do
            HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.HEALTH_CHECK_URL }})
            if [ "$HEALTH_STATUS" == "200" ]; then
              echo "Health check passed"
              exit 0
            fi
            sleep 10
          done
          echo "Health check failed"
          exit 1

      # Rollback on failure
      - name: Rollback on failure
        if: failure()
        run: |
          # Revert to previous task definition
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_SERVICE }} \
            --force-new-deployment
          
          # Wait for rollback to complete
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
          
          echo "Rollback completed"
          exit 1

      # Cleanup
      - name: Cleanup old deployments
        if: success()
        run: |
          # Delete old task definitions
          aws ecs list-task-definitions \
            --family-prefix ${{ env.ECS_SERVICE }} \
            --status INACTIVE \
            --query 'taskDefinitionArns[]' \
            --output text | \
          while read arn; do
            aws ecs deregister-task-definition --task-definition $arn
          done
          
          # Delete old target groups
          aws elbv2 describe-target-groups \
            --query 'TargetGroups[?starts_with(TargetGroupName, `${{ env.ECS_SERVICE }}`) && TargetGroupName!=`${{ env.ECS_SERVICE }}`].TargetGroupArn' \
            --output text | \
          while read arn; do
            aws elbv2 delete-target-group --target-group-arn $arn
          done